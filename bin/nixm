#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,R,W0105,W0212,W0611,W0718


"program helpers"


import getpass
import inspect
import os
import pwd
import readline
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixm.main    import NAME, Client, Config, Event
from nixm.main    import command, forever, privileges, scanner
from nixm.modules import face
from nixm.object  import Object, parse
from nixm.persist import Workdir, modname, pidname, pidfile
from nixm.runtime import Errors, Reactor, later, launch


cfg      = Config()
cfg.opts = Object()
cfg.txt  = ""


if os.path.exists("mods/face.py"):
    import mods.face as MODS # pylint: disable=E0401,E0611
else:
    MODS = None


class CLI(Client):

    def raw(self, txt):
        print(txt)


class Console(CLI):

    def callback(self, evt):
        CLI.callback(self, evt)
        evt.wait()

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        return evt


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} since {tme}")
    

def daemon(verbose=False):
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    pid2 = os.fork()
    if pid2 != 0:
        os._exit(0)
    if not verbose:
        with open('/dev/null', 'r', encoding="utf-8") as sis:
            os.dup2(sis.fileno(), sys.stdin.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as sos:
            os.dup2(sos.fileno(), sys.stdout.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as ses:
            os.dup2(ses.fileno(), sys.stderr.fileno())
    os.umask(0)
    os.chdir("/")
    os.nice(10)


def errors():
    for err in Errors.errors:
        for line in err:
            print(line)


def wrap(func):
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    except Exception as ex:
        later(ex)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main():
    parse(cfg, " ".join(sys.argv[1:]))
    if "d" in cfg.opts:
        daemon("v" in cfg.opts)
        privileges()
        pidfile(pidname(NAME))
        scanner(face, MODS, init=True)
        forever()
    elif "c" in cfg.opts:
        readline.redisplay()
        banner()
        for mod, thr in scanner(face, MODS, init="i" in cfg.opts):
            if "v" in cfg.opts and "output" in dir(mod):
                mod.output = print
            if thr and "w" in cfg.opts:
                thr.join()
        csl = Console()
        csl.start()
        forever()
    else:
        csl = CLI()
        scanner(face, MODS)
        evt = Event()
        evt.txt = cfg.txt
        command(csl, evt)
        evt.wait()


if __name__ == "__main__":
    wrap(main)
    errors()
